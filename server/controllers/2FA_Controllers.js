import express from "express";
import { authenticator } from "otplib";
import qrcode from "qrcode";
import jwt from "jsonwebtoken";

import * as db from "../config/db.js";
import * as config from "../config/config.js";


/**
 * 'GET'
 * Generate the two-factor authentication
 */
export const generate = async(req, res) => {
    try {
        // Get the user details
        const user = await db.usersDB.findOne({_id: req.user.id});

        const secret = authenticator.generateSecret();
        const uri = authenticator.keyuri(user.email, "auth_project", secret);

        await db.usersDB.update({_id: req.user.id}, {$set: { 'twoFaSecret': secret }});
        await db.usersDB.compactDatafile();

        const qrCode = await qrcode.toBuffer(uri, {type: 'image/png', margin: 1});

        res.setHeader('Content-Disposition', 'attachment; filename=qrcode.png');
        return res.status(200).type('image/png').send(qrCode);

    } catch (error) {
        return res.status(500).json({message: error.message});
    }
}


/**
 * 'POST'
 * Validate the two-factor authentication
 */
export const validate = async(req, res) => {
    try {
        // Get the TOTP code generated by the Authenticator app
        const { totp } = req.body;

        if(!totp){
            return res.status(422).json({ message: 'TOTP missing.' });
        }

        const user = await db.usersDB.findOne({ _id: req.user.id });

        // Verify if the user's secret matches the current TOTP generated by the app
        const verify = authenticator.check(totp, user.twoFaSecret);

        if(!verify)
            return res.status(400).json({ message: 'TOTP incorrect or expired.' });

        await db.usersDB.update({ _id: req.user.id}, { $set: { twoFaEnable: true } });
        await db.usersDB.compactDatafile();

        return res.status(200).json({ message: 'TOTP validated successfully.' });

    } catch (error) {
        return res.status(500).json({message: error.message});
    }
}


/**
 * 'POST'
 * Login with the two-factor authentication
 */
export const login = async (req, res) => {
    try {
        const { tempToken, totp } = req.body;

        if(!tempToken || !totp)
            return res.status(422).json({ message: 'Please fill out all fields: tempToken and totp.' });

        const userId = db.cache.get(config.cacheTemporaryTokenPrefix + tempToken);

        if(!userId)
            return res.status(401).json({ messasge: 'The provided temporarily token is incorrect or expired.' });

        const user = await db.usersDB.findOne({ _id: userId });

        const verify = authenticator.check(totp, user.twoFaSecret);

        if(!verify)
            return res.status(401).json({ message: 'The provided TOTP is incorrect or expired!' });

        // Create Access Token
        const accessToken = jwt.sign(
            {userId: user._id},
            config.accessTokenSecret,
            {subject: 'accessApi', expiresIn: config.accessTokenExpiresIn}
        );

        // Create Refresh Token
        const refreshToken = jwt.sign(
            {userId: user._id},
            config.refreshTokenSecret,
            {subject: 'refreshToken', expiresIn: config.refreshTokenExpiresIn}
        );

        // Save the refresh token in the database
        await db.userRefreshTokensDB.insert({
            refreshToken: refreshToken,
            userId: user._id
        });

        return res.status(200).json({
            id: user._id,
            name: user.name,
            email: user.email,
            accessToken: accessToken,
            refreshToken: refreshToken
        });

    } catch (error) {
        res.status(500).json({message: error.message});  
    }
}